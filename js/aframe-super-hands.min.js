AFRAME.registerComponent("super-hands", {
  schema: {
    colliderState: { default: "collided" },
    colliderEvent: { default: "hit" },
    colliderEventProperty: { default: "el" },
    grabStartButtons: { default: ["triggerdown"] },
    grabEndButtons: { default: ["triggerup"] },
    stretchStartButtons: { default: ["gripdown"] },
    stretchEndButtons: { default: ["gripup"] },
    dragDropStartButtons: { default: ["triggerdown"] },
    dragDropEndButtons: { default: ["triggerup"] }
  },
  init: function () {
    this.hoverEls = [];
    this.state = {};
    this.bindMethods();
    this.addEventListeners();
  },
  bindMethods: function () {
    this.onHit = this.onHit.bind(this);
    this.onGrabStart = this.onGrabStart.bind(this);
    this.onGrabEnd = this.onGrabEnd.bind(this);
  },
  addEventListeners: function () {
    this.el.addEventListener(this.data.colliderEvent, this.onHit);
    this.data.grabStartButtons.forEach(button =>
      this.el.addEventListener(button, this.onGrabStart)
    );
    this.data.grabEndButtons.forEach(button =>
      this.el.addEventListener(button, this.onGrabEnd)
    );
  },
  onHit: function (evt) {
    const targetEl = evt.detail[this.data.colliderEventProperty];
    if (this.hoverEls.includes(targetEl)) return;
    this.hoverEls.push(targetEl);
    targetEl.emit("hover-start", { hand: this.el });
    this.el.emit("hover-start", { hand: this.el, target: targetEl });
  },
  onGrabStart: function () {
    this.hoverEls.forEach(el => {
      el.emit("grab-start", { hand: this.el });
      this.el.emit("grab-start", { hand: this.el, grabbed: el });
    });
  },
  onGrabEnd: function () {
    this.hoverEls.forEach(el => {
      el.emit("grab-end", { hand: this.el });
      this.el.emit("grab-end", { hand: this.el, grabbed: el });
    });
    this.hoverEls = [];
  }
});
